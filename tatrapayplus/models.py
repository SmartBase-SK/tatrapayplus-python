# generated by datamodel-codegen:
#   filename:  tatrapayplus_api_sandbox.json
#   timestamp: 2025-04-01T12:22:32+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field, conint, constr


class AuthorizationStatus(Enum):
    NEW = 'NEW'
    PAY_METHOD_SELECTED = 'PAY_METHOD_SELECTED'
    AUTH_DONE = 'AUTH_DONE'
    AUTH_FAILED = 'AUTH_FAILED'
    EXPIRED = 'EXPIRED'
    CANCELLED_BY_TPP = 'CANCELLED_BY_TPP'
    CANCELLED_BY_USER = 'CANCELLED_BY_USER'


class AppearanceLogoRequest(BaseModel):
    logoImage: str = Field(
        ...,
        description='base64 Encoded image. MaxLength - 256px MaxHeight - 64px, Max size 1MB(base64 encoded string). Supported formats are SVG, JPEG, PNG',
    )


class Theme(Enum):
    DARK = 'DARK'
    LIGHT = 'LIGHT'
    SYSTEM = 'SYSTEM'


class Color(BaseModel):
    __root__: constr(regex=r'^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$') = Field(
        ..., description='Hexadecimal value of the color'
    )


class OperationType(Enum):
    CONFIRM_PRE_AUTHORIZATION = 'CONFIRM_PRE_AUTHORIZATION'
    CANCEL_PRE_AUTHORIZATION = 'CANCEL_PRE_AUTHORIZATION'
    CHARGEBACK = 'CHARGEBACK'


class ErrorCode(Enum):
    NOT_ALLOWED_OPER = 'NOT_ALLOWED_OPER'
    TOKEN_UNKNOWN = 'TOKEN_UNKNOWN'
    TOKEN_INVALID = 'TOKEN_INVALID'
    TOKEN_EXPIRED = 'TOKEN_EXPIRED'


class Field40xErrorBody(BaseModel):
    errorCode: ErrorCode
    errorDescription: Optional[constr(max_length=1024)] = None


class ErrorCode1(Enum):
    NO_CONTRACT = 'NO_CONTRACT'
    ILLEGAL_ARGUMENT = 'ILLEGAL_ARGUMENT'
    TOT_AMNT_LOW = 'TOT_AMNT_LOW'
    TOT_AMNT_MISMATCH = 'TOT_AMNT_MISMATCH'
    PAYMENT_NOT_FOUND = 'PAYMENT_NOT_FOUND'
    NOT_ALLOWED_OPER = 'NOT_ALLOWED_OPER'
    DUPLICATE_CALL = 'DUPLICATE_CALL'
    PA_AMOUNT_EXCEEDED = 'PA_AMOUNT_EXCEEDED'
    PA_NOT_FOUND = 'PA_NOT_FOUND'
    PA_ERROR = 'PA_ERROR'
    CB_AMOUNT_EXCEEDED = 'CB_AMOUNT_EXCEEDED'
    CB_NOT_FOUND = 'CB_NOT_FOUND'
    CB_TOO_OLD = 'CB_TOO_OLD'
    CB_ERROR = 'CB_ERROR'
    NO_AVAIL_PAY_METH = 'NO_AVAIL_PAY_METH'


class DirectTransactionRedirectFormHtml(BaseModel):
    __root__: constr(max_length=300000) = Field(
        ..., description='HTML form. Only for status TDS_AUTH_REQUIRED'
    )


class DirectTransactionStatus(Enum):
    OK = 'OK'
    FAIL = 'FAIL'
    TDS_AUTH_REQUIRED = 'TDS_AUTH_REQUIRED'


class TransactionId(BaseModel):
    __root__: str = Field(
        ...,
        description='This identification of the transaction, available only in state OK and FAIL',
        example='5e8bda08-5521-11ed-bdc3-0242ac120002',
    )


class TaskId(BaseModel):
    __root__: str = Field(
        ...,
        description='This identification of the processing transaction job',
        example='5e8bda08-5521-11ed-bdc3-0242ac120002',
    )


class ReasonCodeMethodAvailability(Enum):
    NO_CONTRACT = 'NO_CONTRACT'
    NOT_FEASIBLE_CURRENCY = 'NOT_FEASIBLE_CURRENCY'
    OUT_OF_RANGE_AMOUNT = 'OUT_OF_RANGE_AMOUNT'
    MANDATORY_STRUCTURE_NOT_PROVIDED = 'MANDATORY_STRUCTURE_NOT_PROVIDED'


class ScaAuthLink(BaseModel):
    __root__: str = Field(..., description='sca authorization link')


class CardPayStatus(Enum):
    INIT = 'INIT'
    OK = 'OK'
    FAIL = 'FAIL'
    PA = 'PA'
    CPA = 'CPA'
    SPA = 'SPA'
    XPA = 'XPA'
    CB = 'CB'
    AUTH_REQUIRED = 'AUTH_REQUIRED'
    AUTH_EXPIRED = 'AUTH_EXPIRED'
    AUTH_CANCELED = 'AUTH_CANCELED'


class MaskedCardNumber(BaseModel):
    __root__: constr(max_length=19) = Field(..., description='Masked card number.')


class CardPayReasonCodes3Chars(BaseModel):
    __root__: constr(max_length=3) = Field(..., description='FDS,TDS, SYS.')


class CardPayReasonCodes2Chars(BaseModel):
    __root__: constr(max_length=2) = Field(
        ...,
        description='2 chars card reasonCode, https://developer.visa.com/request_response_codes#action_code , https://developer.mastercard.com/mastercard-send-disbursements/documentation/response-error-codes/network-response-codes/',
    )


class ComfortPayStatus(Enum):
    OK = 'OK'
    FAIL = 'FAIL'


class PayLaterStatus(Enum):
    NEW = 'NEW'
    CUSTOMER_CREATION_IN_PROGRESS = 'CUSTOMER_CREATION_IN_PROGRESS'
    LOAN_APPLICATION_IN_PROGRESS = 'LOAN_APPLICATION_IN_PROGRESS'
    LOAN_APPLICATION_FINISHED = 'LOAN_APPLICATION_FINISHED'
    LOAN_DISBURSED = 'LOAN_DISBURSED'
    CANCELED = 'CANCELED'
    EXPIRED = 'EXPIRED'


class BankTransferStatus(Enum):
    ACCC = 'ACCC'
    ACCP = 'ACCP'
    ACSC = 'ACSC'
    ACSP = 'ACSP'
    ACTC = 'ACTC'
    ACWC = 'ACWC'
    ACWP = 'ACWP'
    RCVD = 'RCVD'
    PDNG = 'PDNG'
    RJCT = 'RJCT'
    CANC = 'CANC'
    ACFC = 'ACFC'
    PATC = 'PATC'
    PART = 'PART'


class TatraPayPlusUrl(BaseModel):
    __root__: str = Field(
        ..., description='URL address for FE redirect to tatraPayPlus app'
    )


class PaymentId(BaseModel):
    __root__: str = Field(..., description='Payment intent identifier')


class MonthlyIncome(BaseModel):
    __root__: float = Field(..., description='Declared monthly income by user')


class MonthlyExpenses(BaseModel):
    __root__: float = Field(..., description='Declared monthly expenses by user')


class NumberOfChildren(BaseModel):
    __root__: conint(ge=0) = Field(
        ..., description='Declared number of children of user'
    )


class ExternalApplicantId(BaseModel):
    __root__: constr(min_length=1, max_length=255) = Field(
        ..., description='External applicant ID, could be generated by application'
    )


class Name(BaseModel):
    __root__: constr(regex=r'^[a-zA-Z0-9Ã-Å¾ ]{1,30}$', min_length=1, max_length=30)


class Phone(BaseModel):
    __root__: constr(
        regex=r'\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$'
    ) = Field(
        ...,
        description='Conditionally mandatory.  In case of TatraPayPlus payment initiation - It is mandatory only if the email attribute is not provided.',
    )


class OrderNo(BaseModel):
    __root__: constr(min_length=1, max_length=100) = Field(
        ...,
        description="Order Number. Sending the same orderNo will affect that previously created application status will change to 'CANCELLED' and new application will be created. In case that application is in state that its not possible to cancel, the error state 422 will be returned\n",
    )


class Quantity(BaseModel):
    __root__: int = Field(..., description='Quantity of the item', example=1)


class TotalItemPrice(BaseModel):
    __root__: float = Field(
        ...,
        description='Total item price (including quantity e.g.:(item price*quantity))',
        example=120,
    )


class ItemName(BaseModel):
    __root__: constr(min_length=1, max_length=255)


class ItemDescription(BaseModel):
    __root__: constr(min_length=1, max_length=1000)


class ItemDetailLangUnit(BaseModel):
    itemName: ItemName
    itemDescription: Optional[ItemDescription] = None


class ItemDetail(BaseModel):
    itemDetailSK: ItemDetailLangUnit
    itemDetailEN: Optional[ItemDetailLangUnit] = None


class ItemInfoURL(BaseModel):
    __root__: AnyUrl = Field(..., example='https://developer.tatrabanka.sk')


class ItemImage(BaseModel):
    __root__: constr(max_length=1000000) = Field(
        ...,
        description='base64 encoded image h:48px w:48px',
        example='VGhpcyBpcyB0ZXN0',
    )


class OrderItem(BaseModel):
    quantity: Quantity
    totalItemPrice: TotalItemPrice
    itemDetail: ItemDetail
    itemInfoURL: Optional[ItemInfoURL] = None
    itemImage: Optional[ItemImage] = None


class OrderItems(BaseModel):
    __root__: List[OrderItem] = Field(..., max_items=1000, min_items=1)


class RemittanceInformation(BaseModel):
    __root__: constr(
        regex=r'^[ 0-9a-zA-Z?:()\/\.,\'+-]{1,100}$', min_length=1, max_length=100
    ) = Field(..., description='Information for creditor')


class PreferredLoanDuration(BaseModel):
    __root__: int = Field(..., description='Preferred loan payment period')


class DownPayment(BaseModel):
    __root__: float = Field(..., description='Downpayment for activation of service')


class Order(BaseModel):
    orderNo: OrderNo
    orderItems: OrderItems
    preferredLoanDuration: Optional[PreferredLoanDuration] = None
    downPayment: Optional[DownPayment] = None


class BankProvider(BaseModel):
    __root__: str = Field(
        ...,
        description='BANK_TRNASFER type bank provider, for full list see documentation',
    )


class AmountRangeRule(BaseModel):
    minAmount: Optional[float] = None
    maxAmount: Optional[float] = None


class PaymentMethod(Enum):
    BANK_TRANSFER = 'BANK_TRANSFER'
    CARD_PAY = 'CARD_PAY'
    PAY_LATER = 'PAY_LATER'
    DIRECT_API = 'DIRECT_API'
    QR_PAY = 'QR_PAY'


class Bicfi(BaseModel):
    __root__: constr(regex=r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}') = (
        Field(..., description='BICFI\n', example='AAAADEBBXXX')
    )


class Header(BaseModel):
    ephemeralPublicKey: Optional[str] = None
    publicKeyHash: Optional[str] = None
    transactionId: Optional[str] = None


class Token1(BaseModel):
    header: Optional[Header] = None
    data: Optional[str] = None
    signature: Optional[str] = None
    version: Optional[str] = None


class ApplePayToken(BaseModel):
    token: Optional[Token1] = None


class GooglePayToken(BaseModel):
    __root__: str = Field(
        ..., description='Value of paymentData.paymentMethodData.tokenizationData.token'
    )


class CardPayLangOverride(Enum):
    SK = 'SK'
    EN = 'EN'
    DE = 'DE'
    HU = 'HU'
    CZ = 'CZ'
    ES = 'ES'
    FR = 'FR'
    IT = 'IT'
    PL = 'PL'


class CardHolder(BaseModel):
    __root__: constr(regex=r'^[ 0-9a-zA-Z.@_-]{2,45}$', min_length=2, max_length=45) = (
        Field(
            ...,
            description='The card holder name. In case of Direct API either cardHolder or email is mandatory',
        )
    )


class RegisterForComfortPay(BaseModel):
    __root__: bool = Field(
        ..., description='Flag to register the card for ComfortPay', example=False
    )


class RegisterForComfortPayObj(BaseModel):
    registerForComfortPay: Optional[RegisterForComfortPay] = False


class CardId(BaseModel):
    __root__: constr(regex=r'[0-9]{1,18}', max_length=18) = Field(
        ..., description='Card identifier for ComfortPay'
    )


class SignedCardId(BaseModel):
    __root__: constr(max_length=1024) = Field(
        ...,
        description='Signed registered card identifier by client signing certificate for direct ComfortPay in base64 encoded string',
    )


class CountryCode(BaseModel):
    __root__: constr(regex=r'[A-Z]{2}') = Field(
        ..., description='ISO 3166 ALPHA2 country code.', example='SE'
    )


class VariableSymbol(BaseModel):
    __root__: constr(regex=r'^[0-9]{1,10}$') = Field(..., example=123456)


class SpecificSymbol(BaseModel):
    __root__: constr(regex=r'^[0-9]{1,10}$')


class ConstantSymbol(BaseModel):
    __root__: constr(regex=r'^[0-9]{1,4}$') = Field(
        ...,
        description='In case of payment method CardPay will be automatically rewrite to value 0608',
    )


class EndToEndId(BaseModel):
    __root__: constr(
        regex=r'^[0-9a-zA-Z\/\. -]{1,35}$', min_length=1, max_length=35
    ) = Field(..., description='Max 35 alphanumeric characters\n')


class CurrencyCode(BaseModel):
    __root__: constr(regex=r'[A-Z]{3}') = Field(
        ..., description='ISO 4217 Alpha 3 currency code.\n', example='EUR'
    )


class AmountValue(BaseModel):
    __root__: float = Field(
        ...,
        description='The amount given with fractional digits, where fractions must be compliant to the currency definition. Negative amounts are signed by minus.\nThe decimal separator is a dot.\n\n**Example:**\nValid representations for EUR with up to two decimals are:\n\n  * 1056\n  * 5768.2\n  * -1.50\n  * 5877.78\n',
        example=120,
    )


class DateTime(BaseModel):
    __root__: datetime = Field(..., example='2017-10-25T15:30:35.035Z')


class Date(BaseModel):
    __root__: date = Field(..., example='2017-10-25')


class Status(Enum):
    OFFER = 'OFFER'
    NO_OFFER = 'NO_OFFER'
    OPEN = 'OPEN'
    PROCESSING = 'PROCESSING'


class Email(BaseModel):
    __root__: EmailStr = Field(
        ...,
        description='Conditionally mandatory. In case of TatraPayPlus payment initiation - It is mandatory only if the phone attribute is not provided. If the email is not provided, the user will not receive the cardPay notification and payLater will ask for the email in the app.\nIn case of Direct API either cardHolder or email is mandatory',
    )


class Iban(BaseModel):
    __root__: constr(regex=r'[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}') = Field(
        ..., description='IBAN of an account.', example='FR7612345987650123456789014'
    )


class Bban(BaseModel):
    __root__: constr(regex=r'[a-zA-Z0-9]{1,30}') = Field(
        ...,
        description='Basic Bank Account Number (BBAN) Identifier.\n\nThis data element can be used in the body of the consent request.\n  Message for retrieving account access consent from this account. This\n  data elements is used for payment accounts which have no IBAN.\n  ISO20022: Basic Bank Account Number (BBAN). \n\n  Identifier used nationally by financial institutions, i.e., in individual countries, \n  generally as part of a National Account Numbering Scheme(s), \n  which uniquely identifies the account of a customer.\n',
        example='BARC12345612345678',
    )


class AccountReference(BaseModel):
    iban: Optional[Iban] = None


class RemittanceInformationUnstructured(BaseModel):
    __root__: constr(regex=r'^[ 0-9a-zA-Z?:()\/\.,\'+-]{1,100}$', max_length=100) = (
        Field(
            ...,
            description='Unstructured remittance information. At present, Tatrabanka bank transfer does not display the remittance information. SEPA remittanceInformationUnstructured contains 140 characters. For TatraPayPlus purposes, the first up to 40 characters are assigned to the paymentId. Others 100 characters are free to use\n',
            example='Ref Number Merchant',
        )
    )


class PaymentIntentCancelResponse(BaseModel):
    selectedPaymentMethod: Optional[PaymentMethod] = None


class ColorAttribute(BaseModel):
    colorDarkMode: Optional[Color] = None
    colorLightMode: Optional[Color] = None


class CardPayUpdateInstruction(BaseModel):
    operationType: OperationType
    amount: Optional[AmountValue] = None


class InitiateDirectTransactionResponse(BaseModel):
    paymentId: PaymentId
    redirectFormHtml: Optional[DirectTransactionRedirectFormHtml] = None


class DirectTransactionData(BaseModel):
    reasonCode: Optional[Union[CardPayReasonCodes3Chars, CardPayReasonCodes2Chars]] = (
        None
    )
    paymentAuthorizationCode: Optional[constr(regex=r'^[ 0-9A-Z]{6}$')] = Field(
        None, description='Payment authorization code'
    )


class Amount(BaseModel):
    amountValue: AmountValue
    currency: CurrencyCode


class AvailablePaymentMethod(BaseModel):
    paymentMethod: PaymentMethod
    isAvailable: bool = Field(
        ...,
        description='if true, method will be shown to user. Otherwise reasonCode will be provided',
    )
    reasonCodeMethodAvailability: Optional[ReasonCodeMethodAvailability] = Field(
        None,
        description='reason code. List of enumaration will be provided in documentation',
    )
    reasonCodeMethodAvailabilityDescription: Optional[str] = Field(
        None, description='reason code description'
    )


class ComfortPay(BaseModel):
    status: ComfortPayStatus
    cid: Optional[CardId] = None


class CardPayAmount(BaseModel):
    amount: AmountValue


class CapacityInfo(BaseModel):
    monthlyIncome: MonthlyIncome
    monthlyExpenses: MonthlyExpenses
    numberOfChildren: NumberOfChildren


class UserData(BaseModel):
    externalApplicantId: Optional[ExternalApplicantId] = None
    firstName: Name
    lastName: Name
    email: Optional[Email] = None
    phone: Optional[Phone] = None


class SupportedCurrency(BaseModel):
    __root__: List[CurrencyCode]


class SupportedCountry(BaseModel):
    __root__: List[CountryCode] = Field(
        ..., description='Payment method is applicable for payment to listed countries'
    )


class Provider(BaseModel):
    countryCode: CountryCode
    providerName: constr(max_length=500) = Field(..., example='Dummie bank')
    providerCode: constr(max_length=50)
    swiftCode: Bicfi


class BankTransfer(BaseModel):
    remittanceInformationUnstructured: Optional[RemittanceInformationUnstructured] = (
        None
    )


class Token(BaseModel):
    __root__: Union[ApplePayToken, GooglePayToken]


class DirectTransactionIPSPData(BaseModel):
    subMerchantId: constr(regex=r'^\d{1,15}$')
    name: constr(regex=r'^[ 0-9a-zA-Z\.:\/\*-]{1,25}$')
    location: constr(regex=r'^[ 0-9a-zA-Z-]{1,13}$')
    country: CountryCode


class SignedCardIdObj(BaseModel):
    signedCardId: Optional[SignedCardId] = None


class CardIdentifierOrRegister(BaseModel):
    __root__: Union[RegisterForComfortPayObj, SignedCardIdObj]


class Address(BaseModel):
    streetName: Optional[constr(max_length=40)] = None
    buildingNumber: Optional[constr(max_length=10)] = None
    townName: Optional[constr(max_length=35)] = None
    postCode: Optional[constr(max_length=10)] = None
    country: CountryCode


class PaymentSymbols(BaseModel):
    variableSymbol: VariableSymbol
    specificSymbol: Optional[SpecificSymbol] = None
    constantSymbol: Optional[ConstantSymbol] = None


class AppearanceRequest(BaseModel):
    theme: Optional[Theme] = 'SYSTEM'
    tintOnAccent: Optional[ColorAttribute] = None
    tintAccent: Optional[ColorAttribute] = None
    surfaceAccent: Optional[ColorAttribute] = None


class UdpatePaymentRequest(BaseModel):
    __root__: CardPayUpdateInstruction


class InitiatePaymentResponse(BaseModel):
    paymentId: PaymentId
    tatraPayPlusUrl: Optional[TatraPayPlusUrl] = None
    availablePaymentMethods: Optional[List[AvailablePaymentMethod]] = Field(
        None, description='List of availibility of each possible methods.'
    )


class DirectTransactionTaskStatusResponse(BaseModel):
    transactionId: Optional[TransactionId] = None
    status: Optional[DirectTransactionStatus] = None
    transactionData: Optional[DirectTransactionData] = None


class Field400ErrorBody(BaseModel):
    errorCode: Optional[ErrorCode1] = None
    errorDescription: Optional[constr(max_length=1024)] = None
    availablePaymentMethods: Optional[List[AvailablePaymentMethod]] = Field(
        None, description='Reason codes of declined methods'
    )


class CardPayStatusStructure(BaseModel):
    status: CardPayStatus
    currency: CurrencyCode
    amount: Optional[AmountValue] = None
    preAuthorization: Optional[CardPayAmount] = None
    chargeBack: Optional[CardPayAmount] = None
    comfortPay: Optional[ComfortPay] = None
    maskedCardNumber: Optional[MaskedCardNumber] = None
    reasonCode: Optional[Union[CardPayReasonCodes3Chars, CardPayReasonCodes2Chars]] = (
        None
    )
    paymentAuthorizationCode: Optional[constr(regex=r'^[ 0-9A-Z]{6}$')] = Field(
        None, description='Payment authorization code'
    )


class PayLater(BaseModel):
    order: Order
    capacityInfo: Optional[CapacityInfo] = None


class AllowedBankProviders(BaseModel):
    __root__: List[Provider] = Field(
        ...,
        description='Allowed bank providers for BANK_TRNASFER method selected by TatraPayPlus client',
    )


class PaymentMethodRules(BaseModel):
    paymentMethod: PaymentMethod
    amountRangeRule: Optional[AmountRangeRule] = None
    supportedCurrency: Optional[SupportedCurrency] = None
    supportedCountry: Optional[SupportedCountry] = None
    allowedBankProviders: Optional[AllowedBankProviders] = None


class ComfortPay1(BaseModel):
    cardIdentifier: Optional[CardIdentifierOrRegister] = None


class DirectTransactionTDSData(BaseModel):
    cardHolder: Optional[CardHolder] = None
    email: Optional[Email] = None
    phone: Optional[Phone] = None
    billingAddress: Optional[Address] = None
    shippingAddress: Optional[Address] = None


class CardDetail(BaseModel):
    cardPayLangOverride: Optional[CardPayLangOverride] = Field(
        None,
        description='It is possible to override the accept-language header for the CardPay payment method. This override only affects CardPay itself, not the whole TatraPayPlus service. \nIf it is empty , then accept-language is taken into account\n',
    )
    isPreAuthorization: Optional[bool] = Field(
        None, description='If true - pre-authorization transaction'
    )
    cardHolder: CardHolder
    billingAddress: Optional[Address] = None
    shippingAddress: Optional[Address] = None
    comfortPay: Optional[CardIdentifierOrRegister] = None


class E2e(BaseModel):
    __root__: Union[PaymentSymbols, EndToEndId] = Field(
        ..., description='EndToEndId or paymentSymbols'
    )


class PaymentIntentUpdateResponse(BaseModel):
    status: Optional[CardPayStatusStructure] = None


class PaymentIntentStatusResponse(BaseModel):
    selectedPaymentMethod: Optional[PaymentMethod] = None
    authorizationStatus: AuthorizationStatus = Field(
        ...,
        description='Status of payment intent authorization progress. Be aware, It doesnt indicate payment status! To get payment status see attribute status.',
    )
    status: Optional[
        Union[CardPayStatusStructure, BankTransferStatus, PayLaterStatus]
    ] = None


class InitiateDirectTransactionRequest(BaseModel):
    amount: Amount
    endToEnd: E2e
    isPreAuthorization: Optional[bool] = Field(
        None, description='If true - pre-authorization transaction'
    )
    tdsData: DirectTransactionTDSData
    ipspData: Optional[DirectTransactionIPSPData] = None
    token: Token


class PaymentMethods(BaseModel):
    __root__: List[PaymentMethodRules] = Field(
        ..., description='TatraPayPlus methods list'
    )


class BasePayment(BaseModel):
    instructedAmount: Amount
    endToEnd: E2e


class PaymentMethodsListResponse(BaseModel):
    paymentMethods: PaymentMethods


class InitiatePaymentRequest(BaseModel):
    basePayment: BasePayment
    userData: Optional[UserData] = None
    bankTransfer: Optional[BankTransfer] = None
    cardDetail: Optional[CardDetail] = None
    payLater: Optional[PayLater] = None
